// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/litmuschaos/litmus/litmus-portal/backend/graphql-server/graph/model"
)

type CreateUserInput struct {
	Username    string  `json:"username"`
	Email       *string `json:"email"`
	CompanyName *string `json:"company_name"`
	Name        *string `json:"name"`
	ProjectName string  `json:"project_name"`
}

type MemberInput struct {
	ProjectID string      `json:"project_id"`
	UserName  string      `json:"user_name"`
	Role      *MemberRole `json:"role"`
}

type ScheduledWorkflows struct {
	WorkflowID          string        `json:"workflow_id"`
	WorkflowManifest    string        `json:"workflow_manifest"`
	CronSyntax          string        `json:"cronSyntax"`
	ClusterName         string        `json:"cluster_name"`
	WorkflowName        string        `json:"workflow_name"`
	WorkflowDescription string        `json:"workflow_description"`
	Weightages          []*Weightages `json:"weightages"`
	IsCustomWorkflow    bool          `json:"isCustomWorkflow"`
	UpdatedAt           string        `json:"updated_at"`
	CreatedAt           string        `json:"created_at"`
	ProjectID           string        `json:"project_id"`
	ClusterID           string        `json:"cluster_id"`
	ClusterType         string        `json:"cluster_type"`
}

type ScheduledWorkflowsRunDetails struct {
	WorkflowID          string               `json:"workflow_id"`
	WorkflowManifest    string               `json:"workflow_manifest"`
	CronSyntax          string               `json:"cronSyntax"`
	ClusterName         string               `json:"cluster_name"`
	WorkflowName        string               `json:"workflow_name"`
	WorkflowDescription string               `json:"workflow_description"`
	Weightages          []*Weightages        `json:"weightages"`
	IsCustomWorkflow    bool                 `json:"isCustomWorkflow"`
	UpdatedAt           string               `json:"updated_at"`
	CreatedAt           string               `json:"created_at"`
	ProjectID           string               `json:"project_id"`
	ClusterID           string               `json:"cluster_id"`
	ClusterType         string               `json:"cluster_type"`
	WorkflowRuns        []*model.WorkflowRun `json:"workflow_runs"`
}

type UpdateUserInput struct {
	ID          string  `json:"id"`
	Name        *string `json:"name"`
	Email       *string `json:"email"`
	CompanyName *string `json:"company_name"`
}

type Weightages struct {
	ExperimentName string `json:"experiment_name"`
	Weightage      int    `json:"weightage"`
}

type MemberRole string

const (
	MemberRoleOwner  MemberRole = "Owner"
	MemberRoleEditor MemberRole = "Editor"
	MemberRoleViewer MemberRole = "Viewer"
)

var AllMemberRole = []MemberRole{
	MemberRoleOwner,
	MemberRoleEditor,
	MemberRoleViewer,
}

func (e MemberRole) IsValid() bool {
	switch e {
	case MemberRoleOwner, MemberRoleEditor, MemberRoleViewer:
		return true
	}
	return false
}

func (e MemberRole) String() string {
	return string(e)
}

func (e *MemberRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MemberRole", str)
	}
	return nil
}

func (e MemberRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
